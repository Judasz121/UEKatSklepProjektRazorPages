@page
@using SklepProjektRazorPages.DbModels;
@using SklepProjektRazorPages.ViewModels;
@model SklepProjektRazorPages.Pages.AdminPanel.Warehouse.EditModel
@{
    ViewData["Title"] = $"Admin Panel - Edit - {@Model.warehouse.Nazwa}";
}
@if (Model.warehouseNotFound)
{
    <div class="text-center">
        <h3>Nimo takiego Magazynu.</h3>
    </div>
}
else if (!AccountHelper.loggedInVerified || !AccountHelper.loggedInAccount.JestAdminem)
{
    <div class="text-center">
        <h3>Nie mosz uprawnień do tej strony.</h3>
    </div>
}
else
{
    <div class="container text-center accounts-container bg-white">
        <a class="btn btn-secondary" asp-page="List">Powrót do listy</a>
        <div class="nav nav-tabs" id="nav-tab" role="tablist">
            <button class="nav-link active" id="warehouse-props-tab" data-bs-toggle="tab" data-bs-target="#warehouse-props" type="button" role="tab" aria-controls="warehouse-props" aria-selected="true">
                Dane Magazynu
            </button>
            <button class="nav-link" id="warehouse-products-tab" data-bs-toggle="tab" data-bs-target="#warehouse-products" type="button" role="tab" aria-controls="warehouse-products" aria-selected="false">
                Produkty w magazynie
            </button>
        </div>
        <div class="tab-content" id="nav-tabContent">
            <div class="tab-pane fade show active" id="warehouse-props" role="tabpanel" aria-labelledby="nav-home-tab">
                <form method="post" enctype="multipart/form-data">
                    <input type="hidden" asp-for="warehouse.ID_Magazynu" />

                    <div class="mb-3">
                        <label class="form-label">@Html.DisplayNameFor(model => model.warehouse.Nazwa)</label>
                        <input type="text" asp-for="warehouse.Nazwa" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">@Html.DisplayNameFor(model => model.warehouse.Kraj)</label>
                        <input type="text" asp-for="warehouse.Kraj" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">@Html.DisplayNameFor(model => model.warehouse.Miasto)</label>
                        <input type="text" asp-for="warehouse.Miasto" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">@Html.DisplayNameFor(model => model.warehouse.Kod_pocztowy)</label>
                        <input type="text" asp-for="warehouse.Kod_pocztowy" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">@Html.DisplayNameFor(model => model.warehouse.Ulica)</label>
                        <input type="text" asp-for="warehouse.Ulica" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">@Html.DisplayNameFor(model => model.warehouse.Numer_budynku)</label>
                        <input type="text" asp-for="warehouse.Numer_budynku" />
                    </div>

                    @if (!string.IsNullOrWhiteSpace(Model.alertValue))
                    {
                        <div class="alert @Model.alertClass" role="alert">
                            @Model.alertValue
                        </div>
                    }

                    <hr />
                    @*            <h4>Nowe Produkty</h4>

                <div id="warehouse-products-edit"></div>*@

                    <button class="btn btn-success">Zapisz</button>
                </form>
            </div>
            <div class="tab-pane fade" id="warehouse-products" role="tabpanel" aria-labelledby="nav-profile-tab">
                @*@Html.Partial("AddWarehouseProductModalPartial")*@
                @*<partial name="_AddWarehouseProductModalPartial" model="Model.allProducts" />*@
                <partial name="_AddWarehouseProductModalPartial" model="(@Model.allProducts, int.Parse(@Model.id))" />
                <table id="warehouse-products-table">
                    <thead>
                        <tr>
                            <th>
                                @{
                                    string displayName = null;
                                    displayName = @Html.DisplayNameFor(model => model.warehouseProducts.FirstOrDefault().Nazwa);
                                }
                                <input class="form-control" type="text" name="@displayName" placeholder="@displayName" />
                            </th>
                            <th>
                                @{
                                    displayName = @Html.DisplayNameFor(model => model.warehouseProducts.FirstOrDefault().Cena_jednostkowa);
                                }
                                <input class="form-control" type="text" name="@displayName" placeholder="@displayName" />
                            </th>
                            <th>
                                @{
                                    displayName = @Html.DisplayNameFor(model => model.warehouseProducts.FirstOrDefault().Kategoria.Nazwa) + " Kategorii";
                                }
                                <input class="form-control" type="text" name="@displayName" placeholder="@displayName" />
                            </th>
                            <th>
                                @{
                                    displayName = "Ilość";
                                }
                                <input class="form-control" type="text" name="@displayName" placeholder="@displayName" />
                            </th>
                            <th>
                                Opcje
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (ProductViewModel p in Model.warehouseProducts)
                        {
                            Produkt_magazyn p_m = Model.product_warehouse.Find(pred => pred.ID_Produktu == p.ID_Produktu);
                            <tr>
                                <th>
                                    @Html.DisplayFor(model => p.Nazwa)
                                </th>
                                <th>
                                    @Html.DisplayFor(model => p.Cena_jednostkowa)
                                </th>
                                <th>
                                    @Html.DisplayFor(model => p.Kategoria.Nazwa)
                                </th>
                                <th>
                                    @Html.DisplayFor(model => p_m.Ilosc_produktu)
                                </th>
                                <th>
                                    <a class="btn btn-sm btn-primary" asp-page="/AdminPanel/Product/View/" asp-route-id="@p.ID_Produktu" >
                                        <i class="fa-solid fa-eye"></i>
                                    </a>
                                    <div class="dropdown">
                                        <button class="btn btn-sm btn-danger" data-bs-toggle="dropdown" title="Usuń z magazynu">
                                            <i class="fa-solid fa-trash"></i>
                                        </button>
                                        <div class="dropdown-menu">
                                            Usunąć produkt z magazynu?
                                            <button class="remove-product btn btn-sm btn-primary" product_warehouse-id="@p_m.ID_Produkt_magazyn">Tak</button> 
                                        </div>
                                    </div>
                                    <div class="dropdown">
                                        <button class="btn btn-sm btn-warning" data-bs-toggle="dropdown" title="Edytuj ilość w magazynie">
                                            <i class="fa-solid fa-pen-to-square"></i>
                                        </button>
                                        <div class="dropdown-menu">
                                            Edytuj ilość w magazynie
                                            <input name="product-amount" value="@p_m.Ilosc_produktu" product_warehouse-id="@p_m.ID_Produkt_magazyn" />
                                            <br>
                                            <button class="update-product-amount btn btn-sm btn-success">Zapisz</button> 
                                        </div>
                                    </div>
                                </th>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>


    </div>
    @Html.AntiForgeryToken()
    @section jsSyntaxHighlighting{
    <script>
        document.addEventListener("DOMContentLoaded", e => {
            function setupProductsDatatable() {
                let $table = $("#warehouse-products-table");
                console.log($table);
                let datatable = GenerateDataTable($table);
                let thisPagePath = "@ViewContext.HttpContext.Request.Path";
                let antiForgeryToken = $(`[name="__RequestVerificationToken"]`).val();


                // options column
                // product amount update
                $(document).on('click', "#warehouse-products-table button.update-product-amount", e => {
                    let $target = $(e.currentTarget);
                    let $input = $target.parent().children(`input[name="product-amount"]`);
                    $.ajax({
                        url: thisPagePath + "?handler=UpdateProductWarehouse",
                        method: "POST",
                        headers: {
                            'RequestVerificationToken': antiForgeryToken
                        },
                        data: {
                            productWarehouseId: $input.attr("product_warehouse-id"),
                            productAmount: $input.val(),
                        },
                    }).done(function(response, status, xhr) {
                        if (Boolean(response.success) === false) {
                            if (Boolean(response.errors) === false || response.errors.length == 0) {
                                showToast("Server Error", "", "danger");
                            }
                            else {
                                response.errors.forEach(err => {
                                    showToast(err.title, err.message, "danger");
                                });
                            }
                        } else {
                            showToast("Pomyślnie", "zaktualizowano ilość produktu w magazynie", "success");
                        }
                    });
                })
                // product removal
                $(document).on('click', 'button.remove-product[product_warehouse-id]', e => {
                    let $target = $(e.currentTarget);
                    $.ajax({
                        url: thisPagePath + "?handler=DeleteWarehouseProduct",
                        method: "POST",
                        headers: {
                            'RequestVerificationToken': antiForgeryToken
                        },
                        data: {
                            warehouseProductId: $target.attr("product_warehouse-id"),
                        },
                    }).done(function(response, status, xhr) {
                        if (Boolean(response.success) === false) {
                            if (Boolean(response.errors) === false || response.errors.length == 0) {
                                showToast("Server Error", "", "danger");
                            }
                            else {
                                response.errors.forEach(err => {
                                    showToast(err.title, err.message, "danger");
                                });
                            }
                        } else {
                            showToast("Pomyślnie", "usunięto produkt z magazynu", "success");
                        }
                    });
                })
            }
            setupProductsDatatable();


            function setupProductsEdit() {
                let self = this;
                this.$el = $("#warehouse-products-edit");
                this.$productList = null;
                this.allProducts = @Html.Raw(Json.Serialize(Model.allProducts));
                this.newProductsIndex = 0;
                this.warehouseId = '@Html.Raw(Model.warehouse.ID_Magazynu)';

                this.genProductElement = function(productId, productName, productAmount) {
                    let $container = $(document.createElement("div"));
                    $container.attr("style", "");
                    $container.attr("product-id", productId);
                    $container.attr("product-amount", productAmount);
                    $container.attr("id", self.newProductsIndex);

                    let $displayName = $(document.createElement("div"));
                    $displayName.attr("class", "fs-5");
                    $displayName.html(productName);
                    $container.append($displayName);

                    let $product = $(document.createElement("input"));
                    $product.attr("type", "hidden");
                    $product.attr("value", productId);
                    $product.attr("name", `newProducts[${self.newProductsIndex}].ID_Produktu`);
                    $container.append($product);

                    let $amount = $(document.createElement('input'));
                    $amount.attr("name", `newProducts[${self.newProductsIndex}].Ilosc_produktu`);
                    $amount.attr('type', 'number');
                    $amount.attr("class", "border-0");
                    $amount.val(productAmount);
                    $container.append(" x");
                    $container.append($amount);

                    self.newProductsIndex++;
                    return $container;
                }

                this.genAddProductSection = function() {

                    let $addProductSection = $(document.createElement("div"));
                    $addProductSection.attr("class", "add-warehouse-product-section");
                    let $addProductBtn = $(document.createElement("button"));
                    $addProductBtn.attr("class", "btn btn-primary");
                    $addProductBtn.html(`<i class="fa-solid fa-plus"></i> Dodaj`);
                    $addProductSection.append($addProductBtn);

                    let $product = $(document.createElement('select'));
                    $product.attr("class", "product-id");
                    self.allProducts.forEach(product => {
                        let $option = $(document.createElement('option'));
                        $option.attr("value", product.value);
                        $option.html(product.text);
                        $product.append($option);
                    });
                    $addProductSection.append($product);

                    $addProductSection.append(" w ilości: ")
                    let $amount = $(document.createElement('input'));
                    $amount.attr("class", "border-0 product-amount");
                    $amount.attr("type", "number");
                    $amount.attr("value", "1");
                    $addProductSection.append($amount);

                    $addProductBtn.on('click', e => {
                        e.preventDefault();
                        let productId = $product.val();
                        let productAmount = $amount.val();
                        let productName = $product.find("option:selected").text();

                        if (self.$productList.find(`[product-id="${productId}"]`).length > 0) {
                            alert("W magazynie jest już rekord tego produktu ");
                            return;
                        }
                        self.$productList.append(genProductElement(productId, productName, productAmount));
                    });

                    return $addProductSection;
                }


                this.$el.append(genAddProductSection());

                this.$productList = $(document.createElement("div"));
                this.$productList.attr("class", "ps-2 product-list");
                // add existing products to list
                let products_warehouse = @Html.Raw(Json.Serialize(Model.allProducts));
                // todo
                this.$el.append(this.$productList);
            }
            // setupProductsEdit()
        });
    </script>
    }
}